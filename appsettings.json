{
  "Database": {
    // If this is set, then an SQLite database will be using as main database server, instead of SQLServer database
    // [ After changing main database between SQL Server and SQLite, you must execute ef migration,
    // You may need to remove all the migrations for previous database provider [ SQLite, SQL Server etc. ] 
    //  some of migration options are platform specific, such as int type auto increment, 
    // while sqlite provider, generated migrate script, .Annotation("Sqlite:Autoincrement", true),
    // On the other hand, SQL Server migrate script, .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn) ]
    // [ Surprisingly: SQLite provider is accepting any migrations, generated with SQL Server Provider, not needed to remove Migrations and apply new Migration ]
    // [ More tests required to reach in a decision, that all the Migrations generate with SQL Server Provider, just 'UseSQLite': 'false', then set 'true' again ]
    "UseSQLite": "true",
    // not implemented yet
    "UseInMemory": "false"
  },
  "MigrateAndSample": {
    // Please, be sure what you are going to do, when setting up first ('IfRemoveAndCreate') and last ('IfIgnoreEnvironment') flag of 'MigrateAndSample'
    // This could serious damage of your production database and big data loss can occur 
    "IfRemoveAndCreate": "false", // If this is set, then EF Core Provider will remove any existing database and create new Database by using Migrations
    // only call sample data 'IfCallSampleData', is not providing any updated sample data, unless using with 'IfRemoveAndCreate' 
    "IfCallSampleData": "false", // If this set, then EF Core Provider will try to inject sample data to the existing or newly created database
    "IfIgnoreEnvironment": "false" // If this is set, the previous two statement will ignore the application running environment,
                                    // default (false) , only in development mode, remove and create + call sample data allowed
  },
  "ConnectionStrings": {
    "DefaultConnection": "DataSource=app.db",
    // "ConMSSQL": [
      //     {
      //         "server": "192.168.1.7,1401",
      //         "database": "AspNetCore2Angular5Db",
      //         "authenticationType": "SqlLogin",
      //         "user": "sa",
      //         "password": "",
      //         "emptyPasswordInput": false,
      //         "savePassword": true,
      //         "profileName": "AspNetCore2Angular5Db Profile"
      //     }
      // ],
    // following connection string using SQL Server as Main Database server [127.0.0.1,1401 used for SQL Server is on Docker in Mac Osx, will replace by your SQL Server Conn]
    "ConMSSQL": "Data Source=127.0.0.1,1401;Database=AspNetCore2Angular5Db;Persist Security Info=False;Integrated Security=false;Connect Timeout=15;Encrypt=false;TrustServerCertificate=false;ApplicationIntent=ReadWrite;MultiSubnetFailover=false;MultipleActiveResultSets=true;",    
    
    // following connection string as alternative to using SQL Server as Main Database server
    "ConSQLiteApp": "Data Source=AspNetCore2Angular5Db.db",

    // following connection string using SQLite as Secondary Database server
    "ConSQLite": "Data Source=AspNetCore2Angular5.db",
    // following connection string using SQLite for Localization Data
    "ConLocalization": "Data Source=LocalizationRecords.sqlite"
  },
  // following connection string as alternative to using SQL Server as Main Database server
  "InMemoryDatabase": {
    "Name": "AspNetCore2Angular5Db"
  },
  "Localization": {
    "CreateNewRecordWhenLocalisedStringDoesNotExist": "false" // If this is set, then the Context will add any not found localized key-value pair into database
                                                            // this ignores, application running environment, the default is only in development mode
                                                            // in development mode, this flag is ignored, and Context is automatically adding not found kay-value into database
  },
  "SiteConfiguration": {
    "AccessTokenLifetime": "1800",
    "IdentityTokenLifetime": "1800",
    "RefreshTokenLifetime": "3600"
  },
  "Logging": {
    "IncludeScopes": false,
    "LogLevel": {
      "Default": "Warning"
    }
  }
}
